openapi: 3.0.4
info:
  title: "Marketplace ${VERSION_APP}"
  description: This is a place where worker can place an order for getting tools and see order status
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: order
    description: Заказ на выдачу инструмента
paths:
  /order/create:
    post:
      tags:
        - order
      summary: Create order
      operationId: orderCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
  /order/read:
    post:
      tags:
        - order
      summary: Read order
      operationId: orderRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderReadResponse'
  /order/update:
    post:
      tags:
        - order
      summary: Update order
      operationId: orderUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderUpdateResponse'
  /order/delete:
    post:
      tags:
        - order
      summary: Delete order
      operationId: orderDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDeleteResponse'
  /order/search:
    post:
      tags:
        - order
      summary: Search order
      operationId: orderSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSearchResponse'

components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/OrderCreateRequest'
          read: '#/components/schemas/OrderReadRequest'
          update: '#/components/schemas/OrderUpdateRequest'
          delete: '#/components/schemas/OrderDeleteRequest'
          search: '#/components/schemas/OrderSearchRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/OrderCreateResponse'
          read: '#/components/schemas/OrderReadResponse'
          update: '#/components/schemas/OrderUpdateResponse'
          delete: '#/components/schemas/OrderDeleteResponse'
          search: '#/components/schemas/OrderSearchResponse'
          offers: '#/components/schemas/OrderOffersResponse'
          init: '#/components/schemas/OrderInitResponse'


    EmployeeId:
      type: string
      description: Идентификатор рабочего
    OrderId:
      type: string
      description: Идентификатор заказа
    OrderLock:
      type: string
      description: Версия оптимистичной блокировки

    BaseOrder:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        orderId:
          type: string
          description: Идентификатор заказа
        createTime:
          type: string
          description: Время создания заказа
        completeTime:
          type: string
          description: Время сборки заказа
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        isFoolToolsInStorage:
          $ref: '#/components/schemas/IsFoolToolsInStorage'
        tools:
          type: object
          description: Список инструмента и кол-во
          additionalProperties:
            type: integer
        missingTools:
          type: object
          description: Список отсутствующего инструмента
          additionalProperties:
            type: integer

    OrderStatus:
      type: string
      description: 'Статус заказа'
      enum:
        - created
        - in progress
        - completed
        - finished

    IsFoolToolsInStorage:
      type: boolean
      description: 'весь инструмент находится в кладовой'
      example: true

    InitResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'

    OrderCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrder'

    OrderCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/OrderCreateObject'

    AdReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'

    OrderReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/AdReadObject'

    OrderUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'
            lock:
              $ref: '#/components/schemas/OrderLock'

    OrderUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/OrderUpdateObject'

    OrderDeleteObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'
            lock:
              $ref: '#/components/schemas/OrderLock'

    OrderDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/OrderDeleteObject'

    AdSearchFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        searchString:
          type: string
          description: Поисковая строка, которая будет искаться в объявлениях

    OrderSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            adFilter:
              $ref: '#/components/schemas/AdSearchFilter'

    AdOffersObject:
      $ref: '#/components/schemas/AdReadObject'

    AdOffersRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            ad:
              $ref: '#/components/schemas/AdOffersObject'

    OrderResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/OrderId'
            ownerId:
              $ref: '#/components/schemas/EmployeeId'
            lock:
              $ref: '#/components/schemas/OrderLock'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/OrderPermissions'

    OrderPermissions:
      type: string
      description: Доступы для клиента для операций над объявлением
      enum:
        - read
        - update
        - delete
        - changeStatus

    OrderResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            ad:
              $ref: '#/components/schemas/OrderResponseObject'

    OrderResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            ads:
              type: array
              items:
                $ref: '#/components/schemas/OrderResponseObject'

    OrderCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseMulti'

    OrderOffersResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'
        - $ref: '#/components/schemas/OrderResponseMulti'

    # STUBS ======================
    OrderRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    OrderRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/OrderDebug'

    OrderDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/OrderRequestDebugMode'
        stub:
          $ref: '#/components/schemas/OrderRequestDebugStubs'

    OrderRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - cannotDelete
        - badSearchString
